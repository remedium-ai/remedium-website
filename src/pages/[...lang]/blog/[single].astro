---
import CallToAction from "@/components/sections/CallToAction.astro";
import Base from "@/layouts/Base.astro";
import { getCollectionCTM } from "@/lib/contentParser.astro";
import parseTomlToJson from "@/lib/utils/parseTomlToJson";
import { getEntryCTM } from "@/lib/contentParser.astro";
import { supportedLanguages } from "@/lib/utils/languageParser.ts";
import LayoutWrapper from "@/components/LayoutWrapper.astro";

export async function getStaticPaths() {
  const paths = await Promise.all(
    supportedLanguages.map(async (lang) => {
      const config = parseTomlToJson("./src/config/config.toml");
      const { blog_folder }: { blog_folder: "blog" } = config.settings;
      const { default_language, show_default_lang_in_url } =
        config.settings.multilingual;

      const postIndex = await getEntryCTM(
        blog_folder,
        "-index",
        lang.languageCode,
      );

      let posts = await getCollectionCTM(blog_folder, lang.languageCode);

      // If draft true in index.md file frontmatter don't include any page related to this page collection in production
      if (postIndex?.data.draft && import.meta.env.PROD) {
        return [];
      }

      return posts.map((post) => ({
        params: {
          lang:
            lang.languageCode === default_language && !show_default_lang_in_url
              ? undefined
              : lang.languageCode,
          single: post.data?.custom_slug || post.slug.split("/").pop(),
        },
        props: {
          post,
          postIndex,
        },
      }));
    }),
  );

  return paths.flat();
}

const { post, postIndex } = Astro.props;
---

<Base {...post.data}>
  <LayoutWrapper
    sidebar={{
      enable: false,
      sticky: true,
    }}
    content={{
      ...post.data,
      markdownContent: post.render,
      currentLocale: Astro.params.lang,
    }}
    layout={postIndex?.data.single?.layout}
    boxShadow={false}
  />
  <CallToAction />
</Base>
