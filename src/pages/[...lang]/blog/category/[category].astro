---
import Base from "@/layouts/Base.astro";
import { getEntryCTM } from "@/lib/contentParser.astro";
import PageHeader from "@/components/widgets/PageHeader.astro";
import CallToAction from "@/components/sections/CallToAction.astro";
import { getTaxonomy } from "@/lib/taxonomyParser.astro";
import { supportedLanguages } from "@/lib/utils/languageParser.ts";
import { slugifyyy } from "@/lib/utils/textConverter";
import parseTomlToJson from "@/lib/utils/parseTomlToJson";
import LayoutWrapper from "@/components/LayoutWrapper.astro";

export async function getStaticPaths() {
  const paths = await Promise.all(
    supportedLanguages.map(async (lang) => {
      const config = parseTomlToJson("./src/config/config.toml");
      const {
        blog_folder: blogFolder,
        multilingual: { default_language, show_default_lang_in_url },
      } = config.settings;

      const postIndex = await getEntryCTM(
        blogFolder as "blog",
        "-index",
        lang.languageCode,
      );
      const categories = await getTaxonomy(
        blogFolder as "blog",
        "categories",
        lang.languageCode,
      );

      const paths = categories.map((category) => ({
        params: {
          category: slugifyyy(category.slug),
          lang:
            lang.languageCode === default_language && !show_default_lang_in_url
              ? undefined
              : lang.languageCode,
        },
        props: { category, postIndex, blogFolder },
      }));

      // If draft true in index.md file frontmatter don't include any page related to this page collection in production
      if (postIndex?.data.draft && import.meta.env.PROD) {
        return [];
      }

      return paths;
    }),
  );

  return paths.flat();
}

const { category, blogFolder, postIndex } = Astro.props;

let post = await getEntryCTM(
  blogFolder as "blog",
  "post-1",
  Astro.currentLocale,
);

// Check if blog posts exist in the folder
let title = `${category.name} - ${postIndex?.data.title}`;
---

<Base {...postIndex?.data} title={title}>
  <PageHeader hiddenPaths={["Category"]} title={category.name} />
  <LayoutWrapper
    pageType="list"
    sidebar={{
      enable: true,
      sticky: true,
      position: "right",
    }}
    contentList={{
      options: postIndex?.data.settings,
      filter: { category: category },
    }}
    content={{ ...post, ...post?.data }}
  />
  <CallToAction />
</Base>
