---
import CallToAction from "@/components/sections/CallToAction.astro";
import FaqSection from "@/components/sections/FaqSection.astro";
import ServiceDetailsSection from "@/components/sections/ServiceDetailsSection.astro";
import ServiceImpact from "@/components/sections/ServiceImpact.astro";
import ServiceSingleIntro from "@/components/sections/PageIntroSection.astro";
import ServicesSection from "@/components/sections/ServicesSection.astro";
import PageHeader from "@/components/widgets/PageHeader.astro";
import Base from "@/layouts/Base.astro";
import { getCollectionCTM } from "@/lib/contentParser.astro";
import { getEntryCTM } from "@/lib/contentParser.astro";
import { supportedLanguages } from "@/lib/utils/languageParser.ts";
import parseTomlToJson from "@/lib/utils/parseTomlToJson";

export async function getStaticPaths() {
  const paths = await Promise.all(
    supportedLanguages.map(async (lang) => {
      const config = parseTomlToJson("./src/config/config.toml");
      const { services_folder }: { services_folder: "services" } =
        config.settings;
      const { default_language, show_default_lang_in_url } =
        config.settings.multilingual;

      const serviceIndex = await getEntryCTM(
        services_folder,
        "-index",
        lang.languageCode,
      );

      let services = await getCollectionCTM(services_folder, lang.languageCode);

      // If draft true in index.md file frontmatter don't include any page related to this page collection in production
      if (serviceIndex?.data.draft && import.meta.env.PROD) {
        return [];
      }

      return services.map((service) => ({
        params: {
          lang:
            lang.languageCode === default_language && !show_default_lang_in_url
              ? undefined
              : lang.languageCode,
          single: service.data?.custom_slug || service.slug.split("/").pop(),
        },
        props: {
          service,
          serviceIndex,
        },
      }));
    }),
  );

  return paths.flat();
}

const { service, serviceIndex: entry } = Astro.props;
---

<Base {...service.data}>
  <PageHeader {...service.data} />
  <ServiceSingleIntro
    content={service.data.intro}
    service_image={service.data.image}
  />
  <ServiceDetailsSection content={service.data.details} />
  <ServiceImpact content={service.data.impact} />
  <ServicesSection content={entry?.data.services_section} />
  <FaqSection content={entry?.data.faq_section} />
  <CallToAction />
</Base>
