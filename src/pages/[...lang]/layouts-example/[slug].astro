---
import CallToAction from "@/components/sections/CallToAction.astro";
import PortfolioSection from "@/components/sections/PortfolioSection.astro";
import PageHeader from "@/components/widgets/PageHeader.astro";
import Base from "@/layouts/Base.astro";
import { getCollectionCTM } from "@/lib/contentParser.astro";
import { getEntryCTM } from "@/lib/contentParser.astro";
import { supportedLanguages } from "@/lib/utils/languageParser.ts";
import parseTomlToJson from "@/lib/utils/parseTomlToJson";

export async function getStaticPaths() {
  const paths = await Promise.all(
    supportedLanguages.map(async (lang) => {
      const config = parseTomlToJson("./src/config/config.toml");
      const { default_language, show_default_lang_in_url } =
        config.settings.multilingual;
      const layoutIndex = await getEntryCTM(
        "layouts-example",
        "-index",
        lang.languageCode,
      );

      let layouts = await getCollectionCTM(
        "layouts-example",
        lang.languageCode,
      );

      // If draft true in index.md file frontmatter don't include any page related to this page collection in production
      if (import.meta.env.PROD && layoutIndex?.data.draft) {
        return [];
      }

      return layouts.map((layout) => ({
        params: {
          lang:
            lang.languageCode === default_language && !show_default_lang_in_url
              ? undefined
              : lang.languageCode,
          slug: layout.data?.custom_slug || layout.slug.split("/").pop(),
        },
        props: {
          layout,
        },
      }));
    }),
  );

  return paths.flat();
}

const { layout } = Astro.props;

const sections =
  layout.data.sections?.filter((section: any) => section.enable) || [];
---

<Base {...layout.data}>
  <PageHeader hiddenPaths={["Layouts example"]} {...layout.data} />
  {
    sections.map(
      (section: any) => section && <PortfolioSection content={section} />,
    )
  }
  <CallToAction />
</Base>
