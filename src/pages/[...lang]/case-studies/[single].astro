---
import "@/components/widgets/VideoModal.astro";
import CallToAction from "@/components/sections/CallToAction.astro";
import Base from "@/layouts/Base.astro";
import { getCollectionCTM } from "@/lib/contentParser.astro";
import { getEntryCTM } from "@/lib/contentParser.astro";
import { supportedLanguages } from "@/lib/utils/languageParser.ts";
import parseTomlToJson from "@/lib/utils/parseTomlToJson";
import LayoutWrapper from "@/components/LayoutWrapper.astro";

export async function getStaticPaths() {
  const paths = await Promise.all(
    supportedLanguages.map(async (lang) => {
      const config = parseTomlToJson("./src/config/config.toml");
      const { portfolio_folder }: { portfolio_folder: "case-studies" } =
        config.settings;
      const { default_language, show_default_lang_in_url } =
        config.settings.multilingual;

      const portfolioIndex = await getEntryCTM(
        portfolio_folder,
        "-index",
        lang.languageCode,
      );

      let portfolios = await getCollectionCTM(
        portfolio_folder,
        lang.languageCode,
      );

      // If draft true in index.md file frontmatter don't include any page related to this page collection in production
      if (portfolioIndex?.data.draft && import.meta.env.PROD) {
        return [];
      }

      return portfolios.map((portfolio) => ({
        params: {
          lang:
            lang.languageCode === default_language && !show_default_lang_in_url
              ? undefined
              : lang.languageCode,
          single:
            portfolio.data?.custom_slug || portfolio.slug.split("/").pop(),
        },
        props: {
          portfolio,
        },
      }));
    }),
  );

  return paths.flat();
}

const { portfolio } = Astro.props;
---

<Base {...portfolio.data}>
  <LayoutWrapper
    boxShadow={false}
    sidebar={{
      enable: true,
      sticky: true,
      position: "left",
      widgets: ["RelatedPortfolios", "CtaBlock"],
      props: {
        relatedPortfolios: { currentPortfolio: { ...portfolio } },
      },
    }}
    content={{
      ...portfolio?.data,
      ListIcons: portfolio?.data.information,
      markdownContent: portfolio?.render,
    }}
  />

  <CallToAction />
</Base>
