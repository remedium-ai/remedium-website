---
const { has_custom_line_animation_bg } = Astro.props;
---

<div
  class:list={[
    "pointer-events-none absolute inset-0 -z-10 h-[51.1875rem] w-full overflow-hidden",
    {
      "bg-gradient-to-t from-white to-slate-100/60":
        !has_custom_line_animation_bg,
    },
  ]}>
  <svg
    class="line-animation match-brand-color mx-auto"
    width="1920"
    height="819"
    viewBox="0 0 1920 819"
    fill="none"
    xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_777_81)">
      <mask
        id="mask0_777_81"
        style="mask-type:alpha"
        maskUnits="userSpaceOnUse"
        x="-165"
        y="0"
        width="2251"
        height="910">
        <path d="M-165 0H2085.33V910H-165V0Z" fill="url(#gradient)"></path>
      </mask>
      <g mask="url(#mask0_777_81)" class="line-animation-paths">
        <path
          d="M2061.59 -593.948C2002.02 -573.676 1884.54 -485.377 1891.15 -294.364C1899.41 -55.5983 2079.61 93.8177 2124.66 319.069C2157.91 485.321 2153.19 901.719 1950.47 1076.66"
          stroke="white"
          stroke-width="1.5">
        </path>
        <path
          d="M1980.45 -544.672C1920.89 -524.4 1803.41 -436.101 1810.01 -245.089C1818.27 -6.32187 1998.47 143.094 2043.52 368.345C2076.77 534.597 2072.06 950.994 1869.33 1125.94"
          stroke="white"
          stroke-width="1.5">
        </path>
        <path
          d="M1898.08 -497.476C1838.52 -477.204 1721.04 -388.905 1727.64 -197.892C1735.9 40.8744 1916.1 190.29 1961.15 415.541C1994.4 581.793 1989.68 998.191 1786.96 1173.14"
          stroke="white"
          stroke-width="1.5">
        </path>
        <path
          d="M1814.56 -452.344C1754.99 -432.072 1637.51 -343.773 1644.12 -152.76C1652.38 86.0062 1832.58 235.422 1877.63 460.673C1910.88 626.925 1906.16 1043.32 1703.44 1218.27"
          stroke="white"
          stroke-width="1.5">
        </path>
        <path
          d="M1729.91 -409.368C1670.34 -389.095 1552.86 -300.797 1559.47 -109.784C1567.73 128.982 1747.93 278.399 1792.98 503.65C1826.23 669.902 1821.51 1086.3 1618.78 1261.24"
          stroke="white"
          stroke-width="1.5">
        </path>
        <path
          d="M1644.12 -368.705C1584.56 -348.432 1467.07 -260.134 1473.68 -69.1211C1481.94 169.645 1662.14 319.061 1707.19 544.312C1740.44 710.564 1735.72 1126.96 1533 1301.91"
          stroke="white"
          stroke-width="1.5">
        </path>
        <path
          d="M1557.18 -330.579C1497.61 -310.307 1380.13 -222.008 1386.74 -30.9953C1395 207.771 1575.2 357.187 1620.25 582.438C1653.5 748.69 1648.78 1165.09 1446.05 1340.03"
          stroke="white"
          stroke-width="1.5">
        </path>
        <path
          d="M1469.05 -295.278C1409.48 -275.005 1292 -186.707 1298.61 4.30569C1306.87 243.072 1487.07 392.489 1532.12 617.74C1565.37 783.992 1560.65 1200.39 1357.92 1375.33"
          stroke="white"
          stroke-width="1.5">
        </path>
        <path
          d="M1379.71 -263.169C1320.14 -242.896 1202.66 -154.598 1209.27 36.4151C1217.53 275.181 1397.73 424.597 1442.78 649.849C1476.03 816.101 1471.31 1232.5 1268.59 1407.44"
          stroke="white"
          stroke-width="1.5">
        </path>
        <path
          d="M1289.14 -234.717C1229.57 -214.445 1112.09 -126.146 1118.7 64.8672C1126.95 303.633 1307.16 453.049 1352.21 678.3C1385.46 844.552 1380.74 1260.95 1178.01 1435.89"
          stroke="white"
          stroke-width="1.5">
        </path>
        <path
          d="M1197.34 -210.517C1137.77 -190.245 1020.29 -101.946 1026.9 89.0674C1035.16 327.833 1215.36 477.249 1260.41 702.5C1293.66 868.752 1288.94 1285.15 1086.21 1460.1"
          stroke="white"
          stroke-width="1.5">
        </path>
        <path
          d="M1104.36 -191.311C1044.8 -171.038 927.316 -82.7406 933.924 108.273C942.183 347.039 1122.38 496.455 1167.43 721.706C1200.68 887.958 1195.97 1304.36 993.24 1479.3"
          stroke="white"
          stroke-width="1.5">
        </path>
        <path
          d="M1010.36 -178.051C950.793 -157.779 833.312 -69.4808 839.92 121.533C848.179 360.299 1028.38 509.715 1073.43 734.966C1106.68 901.218 1101.96 1317.62 899.236 1492.56"
          stroke="white"
          stroke-width="1.5">
        </path>
        <path
          d="M915.621 -171.937C856.055 -151.664 738.574 -63.3655 745.182 127.647C753.441 366.413 933.642 515.83 978.692 741.081C1011.94 907.333 1007.22 1323.73 804.497 1498.68"
          stroke="white"
          stroke-width="1.5">
        </path>
        <path
          d="M820.715 -174.423C761.149 -154.151 643.668 -65.8528 650.275 125.161C658.534 363.927 838.735 513.343 883.785 738.594C917.036 904.846 912.317 1321.24 709.591 1496.19"
          stroke="white"
          stroke-width="1.5">
        </path>
        <path
          d="M726.645 -187.21C667.078 -166.937 549.597 -78.6389 556.205 112.374C564.464 351.14 744.665 500.556 789.715 725.808C822.966 892.06 818.247 1308.46 615.521 1483.4"
          stroke="white"
          stroke-width="1.5">
        </path>
        <path
          d="M635.008 -212.017C575.442 -191.745 457.961 -103.446 464.568 87.5674C472.827 326.333 653.028 475.749 698.078 700.999C731.329 867.251 726.61 1283.65 523.884 1458.6"
          stroke="white"
          stroke-width="1.5">
        </path>
        <path
          d="M532.301 -256.842C472.735 -236.569 355.254 -148.271 361.861 42.7422C370.12 281.508 550.321 430.925 595.371 656.176C628.622 822.428 623.903 1238.82 421.177 1413.77"
          stroke="white"
          stroke-width="1.5">
        </path>
        <path
          d="M444.309 -292.477C384.742 -272.204 267.262 -183.906 273.869 7.10745C282.128 245.873 462.329 395.29 507.379 620.541C540.63 786.793 535.911 1203.19 333.185 1378.14"
          stroke="white"
          stroke-width="1.5">
        </path>
        <path
          d="M353.672 -320.718C294.106 -300.446 176.625 -212.147 183.232 -21.1338C191.491 217.632 371.692 367.048 416.743 592.299C449.993 758.551 445.274 1174.95 242.548 1349.89"
          stroke="white"
          stroke-width="1.5">
        </path>
        <path
          d="M261.016 -341.396C201.45 -321.123 83.969 -232.825 90.576 -41.8115C98.836 196.954 279.036 346.371 324.086 571.622C357.337 737.874 352.618 1154.27 149.892 1329.22"
          stroke="white"
          stroke-width="1.5">
        </path>
        <path
          d="M166.989 -354.507C107.422 -334.234 -10.0593 -245.936 -3.45129 -54.9229C4.80771 183.843 185.009 333.26 230.059 558.511C263.309 724.763 258.591 1141.16 55.8647 1316.1"
          stroke="white"
          stroke-width="1.5">
        </path>
      </g>
    </g>
    <defs>
      <linearGradient
        id="gradient"
        x1="960.166"
        y1="0"
        x2="960.166"
        y2="910"
        gradientUnits="userSpaceOnUse">
        <stop offset="0.267" stop-color="#C4C4C4"></stop>
        <stop offset="1" stop-color="#C4C4C4" stop-opacity="0"></stop>
      </linearGradient>
      <linearGradient
        id="gradientLine"
        x1="1683.83"
        y1="-409.368"
        x2="1683.83"
        y2="1261.24"
        gradientUnits="userSpaceOnUse">
        <stop offset="2%" stop-color="white"></stop>
        <stop offset="3%" stop-color="#2562FF"></stop>
        <stop offset="6%" stop-color="white"></stop>
        <stop offset="1" stop-color="white"></stop>
      </linearGradient>
      <clipPath id="clip0_777_81">
        <rect width="1920" height="910" fill="white"></rect>
      </clipPath>
    </defs>
  </svg>
</div>

<script>
  window.addEventListener("load", async function () {
    const { gsap } = await import("gsap");

    const elem = document.querySelector(".line-animation");
    /**
     * Show moving line animation (from top to bottom)
     */
    function applyGradientAndAnimate() {
      const gradientId = "gradientLine"; // linearGradient tag id
      const gradientStopsSelector = "#gradientLine stop:not(:last-child)"; // Selector of Stops tag of linearGradient tag exclude last stop as it has white color of full offset
      let paths = Array.from(
        document.querySelectorAll(".line-animation .line-animation-paths path"),
      );

      // Show animation in visible lines.
      paths = paths.slice(3, paths.length - 3);

      let animatedlines = 1;
      let animationDuration = 5;
      let endOffset = 100;

      let baseOffset = -10;
      let incrementOffset = () => {
        // To show much height line animation then change incrementOffset
        // Random number between 3 and 6
        return Math.floor(Math.random() * 3) + 3;
      };

      let initialOffsets = [
        baseOffset,
        baseOffset + incrementOffset(),
        baseOffset + incrementOffset() * 2,
      ];

      // Step 1: Set initial stroke to white for all paths
      function removeAnimationFromPaths() {
        paths.forEach((path) => {
          path.setAttribute("stroke", "white");
        });
      }
      removeAnimationFromPaths();

      // Step 2: Select 2 random paths
      function getRandomPaths(paths: any, count: any) {
        const shuffled = paths.sort(() => 0.5 - Math.random());
        return shuffled.slice(0, count);
      }
      let selectedPaths = getRandomPaths(paths, animatedlines); // Select 2 random paths
      selectedPaths.forEach((path: any) => {
        path.setAttribute("stroke", `url(#${gradientId})`);
      });

      // Step 4: Animate the gradient stops
      gsap.to(gradientStopsSelector, {
        duration: animationDuration,
        onUpdate: function () {
          const progress = this.progress();

          // Update each stop offset
          document
            .querySelectorAll(gradientStopsSelector)
            .forEach((stop, index) => {
              let newOffset =
                initialOffsets[index] +
                progress * (endOffset - initialOffsets[0]);
              stop.setAttribute("offset", `${Math.min(newOffset, 100)}%`);
            });
        },
        ease: "linear",
        onComplete: function () {
          removeAnimationFromPaths();

          // Set random paths
          selectedPaths = getRandomPaths(paths, animatedlines);

          // After animation, repeat the process
          applyGradientAndAnimate();
        },
        repeatRefresh: true,
      });
    }

    // Start the process
    elem && applyGradientAndAnimate();
  });
</script>
