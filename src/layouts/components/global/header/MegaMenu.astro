---
import { getCollectionCTM } from "@/lib/contentParser.astro";
import type { NavigationLink } from "@/types";
import parseTomlToJson from "@/lib/utils/parseTomlToJson";
import {
  getLocaleUrlCTM,
  useTranslations,
} from "@/lib/utils/languageParser.ts";
import { toSentenceCase } from "@/lib/utils/textConverter";
import { Image } from "astro:assets";

// Import SVG icons
import documentationIcon from "@/assets/images/icons/svg/documentation.svg";
import analyticsIcon from "@/assets/images/icons/svg/analytics.svg";
import expertiseIcon from "@/assets/images/icons/svg/expertise.svg";
import insightsIcon from "@/assets/images/icons/svg/services/insights.svg";
import taskIcon from "@/assets/images/icons/svg/services/task.svg";
import leaderboardIcon from "@/assets/images/icons/svg/services/leader-board.svg";
import revenueIcon from "@/assets/images/icons/svg/revenue.svg";
import infographicIcon from "@/assets/images/icons/svg/services/infographic.svg";
import rankIcon from "@/assets/images/icons/svg/services/rank.svg";
import pathIcon from "@/assets/images/icons/svg/services/path.svg";

const iconMap = {
  "/src/assets/images/icons/svg/documentation.svg": documentationIcon,
  "/src/assets/images/icons/svg/analytics.svg": analyticsIcon,
  "/src/assets/images/icons/svg/expertise.svg": expertiseIcon,
  "/src/assets/images/icons/svg/services/insights.svg": insightsIcon,
  "/src/assets/images/icons/svg/services/task.svg": taskIcon,
  "/src/assets/images/icons/svg/services/leader-board.svg": leaderboardIcon,
  "/src/assets/images/icons/svg/revenue.svg": revenueIcon,
  "/src/assets/images/icons/svg/services/infographic.svg": infographicIcon,
  "/src/assets/images/icons/svg/services/rank.svg": rankIcon,
  "/src/assets/images/icons/svg/services/path.svg": pathIcon,
} as const;

const config = parseTomlToJson("./src/config/config.toml");
const menu = Astro.props.menu as NavigationLink;

const t = await useTranslations(Astro.currentLocale as string);
let services = await getCollectionCTM(
  config.settings.services_folder as "services",
  Astro.currentLocale,
);

const has_enable_menu = menu.menus?.filter((menu) => menu.enable) || [];
---

<div
  class="hs-dropdown-menu mega-menu has-customized-scrollbar pointer-events-none mt-2 hidden max-h-[90vh] w-full overflow-auto overflow-x-hidden border border-border-default/40 bg-white opacity-0 transition-[opacity,margin] hs-dropdown-open:pointer-events-auto hs-dropdown-open:mt-0 hs-dropdown-open:opacity-100 max-lg:!static max-lg:!transform-none lg:fixed lg:!left-0 lg:border-border-default">
  <div class="container mx-auto px-4 py-8">
    <div class="grid grid-cols-1 gap-8 md:grid-cols-3">
      {menu.menus?.map((menu_one) => (
        <div class="flex flex-col gap-6">
                  {menu_one.name && (
            <h3 class="text-lg font-semibold text-gray-900 border-b border-gray-200 pb-2">
              {menu_one.name}
            </h3>
                  )}
          {menu_one.children && (
            <ul class="space-y-4">
              {menu_one.children.map((child) => (
                <li>
                                    <a
                    href={getLocaleUrlCTM(child.url || Astro.url.origin, Astro.currentLocale)}
                    class="group flex items-start gap-4 p-3 rounded-lg hover:bg-gray-50 transition-colors duration-200"
                  >
                    {child.icon && (
                      <div class="flex h-12 w-12 shrink-0 items-center justify-center rounded-lg bg-gray-50 transition duration-300 group-hover:bg-gray-100">
                        <Image
                          src={iconMap[child.icon as keyof typeof iconMap]}
                          alt={`${child.name} icon`}
                          class="h-7 w-7 text-primary transition duration-300"
                          width={28}
                          height={28}
                        />
                      </div>
                    )}
                    <div class="flex flex-col gap-1">
                      <span class="font-medium text-gray-900 group-hover:text-primary transition-colors duration-200">
                        {child.name}
                      </span>
                      {child.description && (
                        <p class="text-sm text-gray-600">
                          {child.description}
                        </p>
                      )}
                    </div>
                  </a>
                </li>
              ))}
            </ul>
                    )}
                  </div>
                ))}
              </div>
            </div>
          </div>

<style>
  /* Override SVG colors */
  .hs-dropdown-menu img[src*="insights.svg"],
  .hs-dropdown-menu img[src*="revenue.svg"] {
    filter: invert(39%) sepia(57%) saturate(2000%) hue-rotate(202deg) brightness(97%) contrast(96%);
    }
</style>
