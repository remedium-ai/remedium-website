---
import type { Section } from "@/types";
import { getEntryCTM } from "@/lib/contentParser.astro";
import ServiceCard from "@/layouts/components/cards/ServiceCard.astro";
import { markdownify } from "@/lib/utils/textConverter";
import parseTomlToJson from "@/lib/utils/parseTomlToJson";
import { getCollectionCTM } from "@/lib/contentParser.astro";
import OptimizedImage from "../utilities/OptimizedImage.astro";
import { getLocaleUrlCTM } from "@/lib/utils/languageParser.ts";

const config = parseTomlToJson("./src/config/config.toml");

// Type for service section data
export type services_section_type = Section & {
  limit?: number | boolean;
  cta?: "link" | "slider-nav";
  color_scheme?: "light" | "dark";
  show_services_as?: "slider" | "static";
  creative_shape?: { enable: boolean; position: "top" | "bottom" };
};
type Props = {
  content?: services_section_type;
};

// Fetching the default content for the service section
let default_content = (
  await getEntryCTM("sections", "services-section", Astro.currentLocale)
)?.data as services_section_type;

// Enables content customization (e.g., title, description) with a fallback to 'default_content' if not provided.
// The 'content' prop should match the structure of 'default_content'.
// Allows using this section with different content across multiple pages.
// If 'content' is missing, 'default_content' will be used.
let actual_content = {
  ...default_content,
  ...Astro.props.content,
} as services_section_type;

// Extracting required values from 'content' object
let {
  cta,
  limit,
  title,
  enable,
  cta_btn,
  subtitle,
  color_scheme,
  creative_shape,
  show_services_as,
} = actual_content as services_section_type;

let services = await getCollectionCTM(
  config.settings.services_folder as "services",
  Astro.currentLocale,
);

// Limit the number of services to be displayed
services =
  limit && show_services_as !== "slider"
    ? services.slice(0, limit as number)
    : services;
---

{
  enable && (
    <section
      class:list={[
        {
          "overflow-hidden":
            creative_shape?.enable && creative_shape?.position !== "top",
        },
      ]}>
      <div
        class:list={[
          "flex flex-col justify-start gap-12 md:gap-16",
          { "bg-theme-dark py-16 md:py-28": color_scheme === "dark" },
        ]}>
        <div class="container">
          <div class="flex flex-col flex-wrap justify-between gap-8 lg:flex-row lg:items-center">
            <div class="shrink-0 lg:lg:max-w-2xl" data-aos="fade-up-sm">
              {subtitle && (
                <span
                  class:list={[
                    "mb-2.5 inline-block rounded-full border px-5 py-px",
                    color_scheme === "dark"
                      ? "border-white/5 bg-white/5 text-white"
                      : "bg-primary/5 border-secondary text-primary",
                  ]}
                  set:html={markdownify(subtitle)}
                />
              )}
              {title && (
                <h2
                  class:list={[
                    "text-h3",
                    color_scheme === "dark" ? "text-white" : "text-dark",
                  ]}
                  set:html={markdownify(title)}
                />
              )}
            </div>

            {cta_btn?.enable && cta === "link" ? (
              // CTA button
              <div data-aos="fade-up-sm" data-aos-delay="200">
                <a
                  href={getLocaleUrlCTM(cta_btn.url, Astro.currentLocale)}
                  class="relative flex items-center"
                  {...{
                    // Set `rel` attribute for external URLs or use provided value
                    rel: cta_btn.url?.startsWith("http")
                      ? cta_btn.rel || "noopener noreferrer"
                      : cta_btn.rel || undefined,

                    // Set `target` to "_blank" for external URLs unless otherwise specified
                    target: cta_btn.url?.startsWith("http")
                      ? cta_btn.target || "_blank"
                      : cta_btn.target || undefined,
                  }}>
                  <span
                    class:list={[
                      "btn btn-outline has-text-flip-animation",
                      color_scheme === "dark"
                        ? "btn-outline-transparent"
                        : "btn-outline-primary",
                    ]}
                    data-content={cta_btn.label}>
                    {cta_btn.label}
                  </span>
                  <span class="icon">
                    <OptimizedImage
                      alt="icon"
                      inlineSvg={true}
                      class:list={[
                        "h-4 w-4",
                        color_scheme === "dark" ? "text-dark" : "text-white",
                      ]}
                      src="/images/icons/svg/arrow-top-right.svg"
                    />
                  </span>
                </a>
              </div>
            ) : show_services_as === "slider" && cta === "slider-nav" ? (
              // Slider Controls
              <div
                class="flex gap-16"
                data-aos="fade-up-sm"
                data-aos-delay="200">
                <button class="services-slider-btn-prev bg-secondary hover:bg-primary group/slider-control relative flex h-14 w-14 items-center justify-center rounded-full transition duration-300">
                  <OptimizedImage
                    alt="icon"
                    inlineSvg={true}
                    src="/images/icons/svg/arrow-long-left.svg"
                    class="text-primary group-hover/slider-control:text-secondary absolute left-1/3 h-10 w-14 transition duration-300 group-hover/slider-control:-translate-x-1"
                  />
                </button>
                <button class="services-slider-btn-next bg-secondary hover:bg-primary group/slider-control relative flex h-14 w-14 rotate-180 items-center justify-center rounded-full transition duration-300">
                  <OptimizedImage
                    alt="icon"
                    inlineSvg={true}
                    src="/images/icons/svg/arrow-long-left.svg"
                    class="text-primary group-hover/slider-control:text-secondary absolute left-1/3 h-10 w-14 transition duration-300 group-hover/slider-control:-translate-x-1"
                  />
                </button>
              </div>
            ) : null}
          </div>
        </div>
        {creative_shape?.enable ? (
          <div
            class:list={[
              "has-light-shape relative after:absolute after:inset-x-0 after:h-screen after:w-full",
              {
                "pb-4": show_services_as === "slider",
              },
              {
                "after:top-[17.0625rem] after:bg-stone-50 after:md:top-[18rem]":
                  creative_shape?.position === "bottom",
              },
              {
                "after:bg-theme-light after:bottom-[calc(100%_-_18rem)] after:-z-20":
                  creative_shape?.position === "top",
              },
            ]}>
            <div class="relative z-10 container">
              {services && show_services_as === "static" ? (
                <div class="grid gap-5 md:grid-cols-2 lg:grid-cols-3">
                  {services.map((item, index) => (
                    <ServiceCard
                      data-aos="fade-up-sm"
                      data-aos-delay={((index % 3) + 1) * 100}
                      class:list={{
                        "box-shadow-primary": color_scheme === "light",
                      }}
                      content={item}
                    />
                  ))}
                </div>
              ) : (
                <div class="swiper services-swiper w-full">
                  <div class="swiper-wrapper">
                    {services &&
                      services.map((item, index) => (
                        <div
                          class:list={[
                            "swiper-slide !h-auto",
                            { "p-2": color_scheme === "light" },
                          ]}>
                          <ServiceCard
                            class:list={[
                              "min-h-full",
                              {
                                "box-shadow-primary": color_scheme === "light",
                              },
                            ]}
                            content={item}
                            data-aos="fade-up-sm"
                            data-aos-delay={((index % 3) + 1) * 100}
                          />
                        </div>
                      ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        ) : (
          <div class="container">
            {services && show_services_as === "static" ? (
              <div class="grid gap-5 md:grid-cols-2 lg:grid-cols-3">
                {services.map((item, index) => (
                  <ServiceCard
                    data-aos="fade-up-sm"
                    data-aos-delay={((index % 3) + 1) * 100}
                    class:list={{
                      "box-shadow-primary": color_scheme === "light",
                    }}
                    content={item}
                  />
                ))}
              </div>
            ) : (
              <div class="swiper services-swiper w-full">
                <div class="swiper-wrapper">
                  {services &&
                    services.map((item, index) => (
                      <div
                        class:list={[
                          "swiper-slide !h-auto",
                          { "p-2": color_scheme === "light" },
                        ]}>
                        <ServiceCard
                          data-aos="fade-up-sm"
                          data-aos-delay={((index % 3) + 1) * 100}
                          class:list={[
                            "min-h-full",
                            {
                              "box-shadow-primary": color_scheme === "light",
                            },
                          ]}
                          content={item}
                        />
                      </div>
                    ))}
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </section>
  )
}

<script>
  window.addEventListener("load", async function () {
    const { Swiper } = await import("swiper");
    const { EffectFade, Navigation, Controller, Autoplay } = await import(
      "swiper/modules"
    );

    // Initialize content Swiper with navigation
    new Swiper(".services-swiper", {
      modules: [EffectFade, Navigation, Controller, Autoplay],
      speed: 1000,
      spaceBetween: 20,
      breakpoints: {
        540: {
          slidesPerView: 1,
        },
        768: {
          slidesPerView: 2,
        },
        1024: {
          slidesPerView: 3,
        },
      },
      loop: true,
      autoplay: {
        delay: 3000,
      },
      navigation: {
        nextEl: ".services-slider-btn-next",
        prevEl: ".services-slider-btn-prev",
      },
    });
  });
</script>
