---
import { getEntryCTM } from "@/lib/contentParser.astro";
import TeamCard from "@/layouts/components/cards/TeamCard.astro";
import type { Section, TeamMember } from "@/types";
import overrideObjects from "@/lib/utils/overrideObjects.ts";
import { markdownify } from "@/lib/utils/textConverter";
import OptimizedImage from "../utilities/OptimizedImage.astro";
import { getLocaleUrlCTM } from "@/lib/utils/languageParser.ts";

// Type for this section data
type team_section_type = Section & {
  layout?: "horizontal" | "vertical"; // Default is 'vertical'
  leadership_team?: boolean;
  quote?: {
    enable: boolean;
    value: string;
    attribution: string;
  };
};
type Props = {
  content?: team_section_type;
};

// Fetching the default content for the this section
let default_content = (
  await getEntryCTM("sections", "our-team", Astro.currentLocale)
)?.data as team_section_type;

// Enables content customization (e.g., title, description) with a fallback to 'default_content' if not provided.
// The 'content' prop should match the structure of 'default_content'.
// Allows using this section with different content across multiple pages.
// If 'content' is missing, 'default_content' will be used.
let actual_content = overrideObjects(
  { ...default_content },
  Astro.props.content,
) as team_section_type;

// Extracting required values from 'content' object
let {
  enable = true,
  title,
  description,
  subtitle,
  cta_btn,
  limit,
  quote,
  leadership_team,
  layout,
} = actual_content as team_section_type;

let { members }: { members: TeamMember[] } = (
  await getEntryCTM("team", "-index", Astro.currentLocale)
)?.data;

// If leadership_team true, remove the regular members else remove the leadership team members from regular list
if (leadership_team) {
  members = members.filter((member) => member.leadership_team);
} else {
  members = members.filter((member) => !member.leadership_team);
}

// Limit the number of team members to be displayed
members = limit && members ? members.slice(0, limit as number) : members;

// Check if section layout is horizontal
const isHorizontal = layout === "horizontal";
---

{
  enable && (
    <section>
      <div
        class:list={[
          "container",
          {
            "grid place-items-stretch gap-10 lg:grid-cols-2": isHorizontal,
          },
        ]}>
        <div
          class:list={[
            "flex flex-wrap items-center justify-between gap-6 overflow-x-hidden lg:flex-nowrap",
          ]}>
          <div class="lg:max-w-2xl" data-aos="fade-right-sm">
            {subtitle && (
              <span
                class="bg-primary/5 border-secondary text-primary mb-2.5 inline-block rounded-full border px-5 py-px"
                set:html={markdownify(subtitle)}
              />
            )}
            {title && (
              <h2 class="text-h3 text-inherit" set:html={markdownify(title)} />
            )}
            {description && (
              <p class="mt-6" set:html={markdownify(description, true)} />
            )}
            {quote && quote.enable && (
              <blockquote class="border-primary mt-5 max-w-xl border-l py-1 pl-5">
                <p class="opacity-70" set:html={quote.value} />
                <p class="mt-3 text-xs" set:html={quote.attribution} />
              </blockquote>
            )}
          </div>
          {cta_btn && cta_btn.enable && (
            <div data-aos="fade-right-sm" data-aos-delay="200">
              <a
                {...{
                  // Set `rel` attribute for external urls or use provided value
                  rel: cta_btn.url?.startsWith("http")
                    ? cta_btn.rel || "noopener noreferrer"
                    : cta_btn.rel || undefined,

                  // Set `target` to "_blank" for external urls unless otherwise specified
                  target: cta_btn.url?.startsWith("http")
                    ? cta_btn.target || "_blank"
                    : cta_btn.target || undefined,
                }}
                class="relative flex items-center"
                href={getLocaleUrlCTM(cta_btn.url, Astro.currentLocale)}>
                <span
                  class="btn btn-outline has-text-flip-animation btn-outline-primary"
                  data-content={cta_btn.label}>
                  {cta_btn.label}
                </span>
                <span class="icon">
                  <OptimizedImage
                    alt="icon"
                    inlineSvg={true}
                    class="h-4 w-4 text-white"
                    src="/images/icons/svg/arrow-top-right.svg"
                  />
                </span>
              </a>
            </div>
          )}
        </div>
        {members && members.length > 0 && (
          <div
            class:list={[
              "grid gap-6",
              isHorizontal
                ? "md:grid-cols-2 md:grid-rows-2 md:place-items-center"
                : "mt-8 md:grid-cols-2 lg:mt-16 lg:grid-cols-4",
            ]}>
            {members.map((item, index) => (
              <TeamCard
                content={item}
                image_size={isHorizontal && index !== 0 ? "md" : "lg"}
                class:list={[{ "md:row-span-2": index === 0 && isHorizontal }]}
                data-aos="fade-up-sm"
                data-aos-delay={index * 100}
              />
            ))}
          </div>
        )}
      </div>
    </section>
  )
}
